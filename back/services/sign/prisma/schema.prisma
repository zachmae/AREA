// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

///
//
// @title Service Info
// @author @Perry-Chouteau
//
///

// @description Services using api
//model ServiceInfo {
//  id            Int         @id @unique @default(autoincrement())
//  createdAt     DateTime    @default(now())
//  updatedAt     DateTime    @updatedAt
//
//
//  action        ActionInfo[]
//  reaction      ReactionInfo[]
//  name          String      @db.VarChar(255)
//}

// @description Events using cron or webhook
//model ActionInfo {
//  id            Int         @id @unique @default(autoincrement())
//  createdAt     DateTime    @default(now())
//  updatedAt     DateTime    @updatedAt
//  //
//  name          String      @db.VarChar(255)
//  description   String?     @db.VarChar(255)
//  serviceId     Int
//  service       ServiceInfo     @relation(fields: [serviceId], references: [id])
//  type          ActionE     @default(WEBHOOK)
//  urlCallback   String?
//  active        Boolean     @default(true)
//}

// @description Events using cron or webhook
//enum ActionE {
//  CRON
//  WEBHOOK
//}

// @description Reactions using api
//model ReactionInfo {
//  id            Int         @id @unique @default(autoincrement())
//  createdAt     DateTime    @default(now())
//  updatedAt     DateTime    @updatedAt
//  //
//  name          String      @db.VarChar(255)
//  description   String?      @db.VarChar(255)
//  serviceId     Int
//
//  type          ReactionE    @default(MAIL)
//  service       ServiceInfo    @relation(fields: [serviceId], references: [id])
//}

// @description Reactions using api or mail
//enum ReactionE {
//  API
//  MAIL
//}

///
//
// @title User Info
// @author @Perry-Chouteau
//
///

// @description User
model User {
  id            Int         @id @unique @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  email         String      @unique
  password      String
  name          String?
  token         String?
  tokenTime     DateTime?
  code          String
  active        Boolean     @default(false)
//  areas          Area[]
//  auths         Auth[]
  @@unique(fields: [id, createdAt, updatedAt, email, password, name, token, tokenTime, code, active], name: "UserModel")
  @@unique(fields: [email, code], name: "UserEmailCode")
  @@unique(fields: [email, password], name: "UserEmailPassword")
}

// @description Authentification to a service
//model Auth {
//  id          Int         @id @unique @default(autoincrement())
//  createdAt   DateTime    @default(now())
//  updatedAt   DateTime    @updatedAt
//
//  userId      Int
//  user        User        @relation(fields: [userId], references: [id])
//
//  serviceId   Int
//  service     Service     @relation(fields: [serviceId], references: [id])
//
//  authentified Boolean     @default(false)
//  token       String?      @unique @db.VarChar(255)
//  refreshToken String?     @unique @db.VarChar(255)
//}

///
//
// @title Area Info
// @author @Perry-Chouteau
//
///

//model Area {
//  id            Int         @id @unique @default(autoincrement())
//  createdAt     DateTime    @default(now())
//  updatedAt     DateTime    @updatedAt
//  //
//  title         String?
//  actionId      Int
//  reactionId    Int
//
//  authorId      Int
//  author        User        @relation(fields: [authorId], references: [id])
//  active        Boolean     @default(true)
//}
